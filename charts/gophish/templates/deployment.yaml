apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "gophish.fullname" . }}
  labels:
    {{- include "gophish.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
  {{- toYaml .Values.strategy | nindent 4 }}
  selector:
    matchLabels:
      {{- include "gophish.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "gophish.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "gophish.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.securityContext.pod | nindent 8 }}
      {{- if or .Values.initContainers }}
      initContainers:
        {{- with .Values.initContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext.container | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          envFrom:
            {{ if .Values.customConfig }}
              - configMapRef:
                  name: {{ .Values.customConfig }}
            {{ else }}
              - configMapRef:
                name: {{ include "gophish.fullname" . }}-config
            {{ end }}
          ports:
            - name: http
              containerPort: {{ .Values.listener.service.port }}
              protocol: TCP
            - name: admin
              containerPort: {{ .Values.admin.service.port }}
              protocol: TCP
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.path }}
              port: {{ .Values.livenessProbe.port }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: {{ .Values.readinessProbe.port }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          volumeMounts:
            {{- if and .Values.persistence.data.enabled .Values.persistence.enabled }}
            - name: gophish-data
              mountPath: {{ .Values.data.dataMountDir }}
              subPath: {{ ternary "data" (printf "%s/data" .Values.persistence.data.subPath) (empty .Values.persistence.data.subPath) }}
            {{- else }}
            - name: gophish-gophish
              mountPath: {{ .Values.data.dataMountDir }}
              subPath: {{ ternary "data" (printf "%s/data" .Values.data.subPath) (empty .Values.data.subPath) }}
            {{- end }}
          {{- end }}
      volumes:
        - name: gophish-gophish
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (printf "%s-gophish" (include "common.names.fullname" .)) }}
          {{- end }}
          {{- if and .Values.persistence.data.enabled .Values.persistence.enabled }}
          - name: gophish-data
            persistentVolumeClaim:
              claimName: {{ if .Values.persistence.data.existingClaim }}{{ .Values.persistence.data.existingClaim }}{{- else }}{{ template "common.names.fullname" . }}-data{{- end }}
          {{- end }}
        {{- if .Values.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
