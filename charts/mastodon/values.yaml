# Default values for mastodon.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: tootsuite/mastodon
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "v4.2.10"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

mastodon:
  # Please look at https://docs.joinmastodon.org/admin/config/ for the full documentation.
  localDomain: example.com
  # available locales: https://github.com/mastodon/mastodon/blob/main/config/application.rb#L71
  locale: en
  # Possible values are debug, info, warn, error, fatal
  logLevel: debug

  sidekiq:
    concurrency: 25

    nodeSelector:
      doks.digitalocean.com/node-pool: josa-cloud-np

    resources:
      {}
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

  streaming:
    port: 4000
    # this should be set manually since os.cpus() returns the number of CPUs on
    # the node running the pod, which is unrelated to the resources allocated to
    # the pod by k8s
    workers: 3
    # The base url for streaming can be set if the streaming API is deployed to
    # a different domain/subdomain.
    # base_url: wws://streaming.example.com
    livenessProbe:
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 3

    readinessProbe:
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 3

    nodeSelector:
      doks.digitalocean.com/node-pool: josa-cloud-np

    resources:
      {}
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

  web:
    port: 3000

    livenessProbe:
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 3

    readinessProbe:
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 3

    nodeSelector: {}

    resources:
      {}
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

  cron:
    # run `tootctl media remove` every week
    removeMedia:
      enabled: true
      schedule: "0 0 * * 0"

  secrets:
    ## The Secret name containing the secrets for mastodon.
    ## NOTE: Must contain key `SECRET_KEY_BASE`
    ## NOTE: Must contain key `OTP_SECRET` for otp
    ## NOTE: Must contain key `VAPID_PRIVATE_KEY` for push notification
    ## NOTE: Must contain key `VAPID_PUBLIC_KEY` for push notification
    secretName: "mastodon-secrets"

  persistence:
    assets:
      accessMode: ReadWriteOnce
      storageClassName: ""
      resources:
        requests:
          storage: 10Gi
    system:
      accessMode: ReadWriteOnce
      storageClassName: ""
      resources:
        requests:
          storage: 100Gi

postgres:
  host: "localhost"
  name: mastodon
  port: 25060
  ## https://www.postgresql.org/docs/10/libpq-ssl.html
  sslMode: "require"

  credentials:
    ## The Secret name containing the credentials for postgres.
    ## NOTE: Must contain key `DB_USER`
    ## NOTE: Must contain key `DB_PASS`
    secretName: "database-secret"
    ## The Secret name containing the certificate for postgres.
    ## NOTE: Must contain key `db-certificate.crt`
    ## NOTE: Leave empty if your database ssl mode is disable or allow or prefer
    certificateSecret: "database-cert"

redis:
  # namespaces all Redis keys
  # This allows sharing the same Redis database between different projects
  namespace: mastodon
  ## The Secret name containing the url for redis.
  # Example value: redis://user:password@localhost:6379
  ## NOTE: Must contain key `REDIS_URL`
  secretName: "redis-secret"

elasticsearch:
  enabled: true
  host: elasticsearch-coordinating-only.elasticsearch.svc.cluster.local
  port: 9200
  prefix: mastodon

  ## This is optional
  credentials:
    enabled: false
    ## The Secret name containing the credentials for ElasticSearch.
    ## NOTE: Must contain key `ES_USER`
    ## NOTE: Must contain key `ES_PASS`
    secretName: ""

smtp:
  authMethod: plain
  server: mail.example.com
  port: 465
  fromAddress: "Mastodon <noreply@example.com>"
  domain: josa.ngo
  startTls: false
  tls: true
  credentials:
    ## The Secret name containing the credentials for smtp.
    ## NOTE: Must contain key `SMTP_LOGIN`
    ## NOTE: Must contain key `SMTP_PASSWORD`
    secretName: "smtp-secrets"

s3:
  enabled: true
  bucket: "mastodon-dev"
  region: "fra1"
  protocol: https
  hostname: "fra1.digitaloceanspaces.com"
  endpoint: "https://fra1.digitaloceanspaces.com"
  credentials:
    ## The Secret name containing the credentials for s3.
    ## NOTE: Must contain key `AWS_ACCESS_KEY_ID`
    ## NOTE: Must contain key `AWS_SECRET_ACCESS_KEY`
    secretName: "s3-secrets"

ldap:
  enabled: true
  host: "localhost"
  port: "636"
  ldapMethod: "simple_tls"
  baseDN: "DC=example,DC=com"
  bindDN: "cn=admin,dc=example,dc=com"
  uid: "mastodon"
  mail: "mail"
  searchFilter: "(|(%{uid}=%{email})(%{mail}=%{email}))"
  credentials:
    ## The Secret name containing the credentials for ldap.
    ## NOTE: Must contain key `LDAP_PASSWORD`
    secretName: "ldap-secret"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "mastodon-sa"

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  className: "nginx"
  annotations:
    # cert-manager.io/cluster-issuer: "letsencrypt"
    # nginx.ingress.kubernetes.io/proxy-body-size: 40m
  hosts:
    - host: example.com
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls:
    []
    # - secretName: josa.social-tls
    #   hosts:
    #     - example.com

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

# The annotations set with jobAnnotations will be added to all job pods.
jobAnnotations: {}

affinity: {}
